# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, metatron team
# This file is distributed under the same license as the metatron discovery docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: metatron discovery docs 0.4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-19 14:45+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../discovery/part01/druid_tests.rst:2
# cbd67b75bd774012a6f02404576fb0c5
msgid "Druid 성능 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:7
# 7037023cf39e4af98fcbcdfc96661bcd
msgid "Druid는 '실시간' 탐색이 가능한 데이터 스토어를 지향하는 만큼 수치화된 성능을 평가함에 있어서는 다음의 두 가지 측면에 초점이 맞춰집니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:9
# 75ea66c1c7074ab9ad933d97b46753fc
msgid "Query latency"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:10
# 17360c06a7f94b11949825db51eb12fb
msgid "Ingestion latency"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:12
# 4720ebdffe1f4011b10615aeb5e3e22d
msgid "쿼리 처리와 ingestion에서 소요되는 시간을 최소화하는 것이 '실시간'을 이루는 핵심이 되기 때문입니다. 지금까지 Druid 개발진을 비롯한 여러 기관 및 개인이 이러한 기준으로 Druid 성능을 평가한 benchmark들을 산출하고 그 밖의 지표를 통해 Druid를 다른 데이터베이스 관리 시스템들과 비교한 결과를 공개하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:16
# fd3f9a49acf84a38829a9e9dc63c4937
msgid "Druid 개발진의 자체 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:18
# ca8d57f68cd64f7e95a91a88dd5cd210
msgid "Druid 개발진이 2014년 발표한 백서 'Druid: A Real-time Analytical Data Store'[#f1]_\\의 Chapter 6 Performance에서는 Druid의 query 및 ingestion latency를 다방면에서 평가한 결과를 상세하게 설명하고 있습니다. 본 절에서는 이 중에서 Druid의 성능을 직관적으로 살펴볼 수 있는 지표 위주로 간단히 소개합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:21
# 8f455b543f394b64b62dfcbb0c4cdd3d
msgid "Query latency 성능"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:23
# 141b13daaf6a47be9a1ea8b9b858a670
msgid "Druid의 query latency 성능에 대해 백서에서는 현장에서 실제 사용되는 데이터셋 8종과 TPC-H 데이터셋에 대한 쿼리 결과를 기준으로 평가하였는데, 여기서는 TPC-H 데이터셋에 대한 쿼리 결과를 소개합니다. TPC-H 데이터셋에 대한 query latency는 MySQL과의 비교 평가 방식으로 진행하였고, 이때 사용한 클러스터 사양은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:25
# 9763a50b0aed47f0bb150341f17a83d8
msgid "**Druid historical 노드:** Amazon EC2 m3.2xlarge instance types (Intel® Xeon® E5-2680 v2 @ 2.80GHz)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:26
# 55c9976e06074d84b55d92bca194972d
msgid "**Druid broker 노드:** c3.2xlarge instances (Intel® Xeon® E5-2670 v2 @ 2.50GHz)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:27
# fcc2fa7dff2b430ca81a0adbeb814e66
msgid "**MySQL Amazon RDS instance** (Druid와 동일한 m3.2xlarge instance type)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:29
# e7ae49e9d00b4d59b1ff69e5aaa3462a
msgid "아래는 단일 노드에서의 1GB 및 100GB TPC-H 데이터셋에 대한 Druid와 MySQL의 query latency를 비교한 결과를 정리한 그래프입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:35
#: ../../discovery/part01/druid_tests.rst:45
#: ../../discovery/part01/druid_tests.rst:62
# 1ad93fa7b90f4c18ab0973643cc95d6f
# 16dd0763b8c945899fb4d094120d63cf
# dfd5bbd291e6445eabce23bf21f37b5e
msgid "Source: Druid: A Real-time Analytical Data Store"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:37
# 39af8fd8e6b047298d38c8bfba71ce7f
msgid "이러한 결과는 Druid의 도입으로 기존 관계형 데이터베이스 시스템에 비해 획기적으로 빠른 쿼리 속도를 낼 수 있음을 시사합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:39
# 882a435ffaa549718c1dadad677b5908
msgid "또한 여러 노드를 엮어서 클러스터를 구성할 경우 쿼리 처리 속도가 어느 정도 향상되는지도 측정하였습니다. 쿼리 대상 데이터셋으로서 100GB TPC-H를 사용하였으며 단일 노드(8개 코어)와 6개 노드 클러스터(48개 코어) 간의 성능 차이는 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:47
# 2681922e9cec47db80d4f88aceb6322e
msgid "모든 쿼리가 linear scalability를 달성하지는 않았으나 상대적으로 단순한 쿼리들의 경우에는 거의 코어 수에 정비례하는 처리 속도 증대를 보여주었습니다(SK텔레콤 Metatron에서는 더욱 뚜렷한 linear scalability를 달성할 수 있도록 기능을 보강하였습니다)."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:50
# 73453662ab6044aca13a3bd22550264b
msgid "Ingestion latency 성능"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:52
# 0734045c0478421db76d3cfc87919ea1
msgid "Druid의 ingestion 성능에 대해서도 평가하였는데, 이때 사용된 클러스터 환경은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:54
# 5dd60ca5d58d45f686fce8f81525bd11
msgid "6개 노드, 총 메모리 360GB 및 96개 코어(12 x Intel® Xeon® E5-2670)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:56
# cb8bae4a0fd44ce0902e83a67791a1e6
msgid "ingestion 대상으로는 현장에서 실제 사용되는 데이터 소스 8종이었으며 데이터 소스 각각의 특징과 ingestion 결과는 아래와 같았습니다. 참고로 ingestion 측정을 하는 기간 동안 해당 클러스터에서는 그 외 다른 데이터 소스에 대한 ingestion 동작도 병행해서 실시하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:64
# 42f142914124441199d505036227d002
msgid "데이터 ingestion 속도는 데이터의 복잡성 등 여러 가지 변수의 영향을 받지만, 측정 결과를 놓고 볼 때 대체로 'interactivity'라는 Druid의 개발 목표에 부합한다고 할 수 있습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:68
# dbcd555989cc4e5291e57f919e6aef31
msgid "SK텔레콤의 Druid 성능 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:70
# bcd57552cd1044778c1a16695d48c82e
msgid "SK텔레콤에서는 다음과 같이 Druid의 query latency와 ingestion latency를 측정하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:73
# a96d90035b6445ef8d477e40b391543f
msgid "Query latency 테스트"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:75
# 1d3ae8f23a3546a88c0005d38e2cadbe
msgid "Query latency를 측정하는 조건은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:77
# 6a531d1ecc3746308be0a249b28318ec
msgid "데이터: TPC-H 100G dataset (9억 rows)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:78
# 1180e7ed1c164a669f4c716be906e40c
msgid "Pre-aggregation 기준: day"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:79
# 79dc1d3b1d5c450c913c3902a0157c2d
msgid "서버: r3.4xlarge nodes, (2.5GHz * 16, 122G, 320G SSD) * 6"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:80
# 250736f9c1c54e6298af724f8fe81a4d
msgid "Historical 노드 개수: 6개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:81
# c9378d53c9934bb0ab30c4e28fe1cf2d
msgid "Broker 노드 개수: 1개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:83
# dd41397da4014c1a894a0359ca2e6e40
msgid "그 결과 TPC-H 100G dataset의 5개 쿼리의 반환 속도는 다음과 같았습니다(Hive의 쿼리 처리 속도도 참조용으로 함께 측정하였습니다)."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:89
#: ../../discovery/part01/druid_tests.rst:113
# bd5f7f14fac7404e9ab74ebb7248df1f
# 2890b1a97ac24872b7a915233efd8c42
msgid "Source: SK Telecom T-DE WIKI Metatron Project"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:92
# ef63723398ab4debbab7472a248ec1e8
msgid "Hive의 benchmark가 현저하게 떨어지는 원인 중 일부는 Thrift로 측정한 것과 partition없이 test set이 구성되어 있기 때문입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:95
# d4dc16df9f3d480fa98707a1b1278a94
msgid "Ingestion latency 테스트"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:97
# bf6b435e168a46b69bb078c27243b155
msgid "Ingestion latency를 측정하는 조건은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:99
# e08d96eff3064b419ca72a22d297b904
msgid "Ingestion data size: 1일 30억 rows, 10 columns"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:100
# 00e6a3efc3114622b7c3b92f70fae255
msgid "메모리: 512 GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:101
# a70806ba2a2040b99c0bcb8f8c6e70fa
msgid "CPU: Intel (R) Xeon (R) Gold 5120 CPU @ 2.20 GHz (core 56개)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:102
# 7fa47239c5424cfb8e9fd7d154df3f47
msgid "Historical 노드 개수: 100개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:103
# 19106b8bc1514450a3bfaa1fecc4f920
msgid "Broker 노드 개수: 2개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:104
# ca218370b9d649d297d31a0c2a1c4ccf
msgid "총 10개의 middle manager 노드 중 3개에서 job 수행"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:105
# 0314392a13a84e2185499629bd11a190
msgid "Ingestion 도구: Apache Kafka"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:107
# d4372bef4d1e46de9c6d4925a34d36c0
msgid "이와 같은 조건으로 data ingestion을 100회 수행하였고 평균 ingestion latency는 1.623439초였습니다. 여기서 ingestion latency는 아래 도식화한 것과 같이 Kaka ingestion, Druid ingestion, Druid query 처리에 소요되는 시간을 모두 합산한 것입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:116
# 6134142323f94ad5a1a2920f2d201a52
msgid "Druid에 대한 제3자의 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:119
# 8275e20ac35f459f93b52f1b08ecf261
msgid "Outlier의 Druid 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:121
# 0f8bef8fcf554f7bb0da672cf09cf626
msgid "다음은 Outlier 블로그에 2016년 8월 26일에 게재된 Top 10 Time Series Databases라는 포스트\\ [#f2]_\\에서는 20개의 주요 오픈소스 시계열 데이터베이스 시스템을 평가하였습니다. 기고자인 Steven Acreman이 개인적으로 매긴 성능 랭킹에서 Druid는 20개 중 9위를 차지하였는데, 여기서 밝힌 Druid의 주요 성능은 다음과 같습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:123
# b1126ca23a864b01b677535abce8bd23
msgid "Outlier의 주요 Druid 평가 내용"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# b4cfd49286cc4bfab5fb328389bc6ecc
msgid "평가 기준"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# ed9b411e38c445039ec23ac404731778
msgid "Druid의 성능"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 6940f4d1697240a3bd1ab70514ac83d6
msgid "쓰기 성능 - 단일 노드"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 9d3f4844a9df49eeadeb2f3611032e23
msgid "25k metrics/sec :raw-html:`<br />` 출처: https://groups.google.com/forum/#!searchin/druid-user/benchmark%7Csort:relevance/druid-user/90BMCxz22Ko/73D8HidLCgAJ"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# bba7e1b7a1f14d84ad16fcec67987024
msgid "쓰기 성능 - 5개 노드 클러스터"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 72210e9ede4a404e89a93c684f754c70
msgid "100k metrics/sec (추산 결과)"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# ffbcfa32f6da43e19f8886d286303916
msgid "쿼리 성능"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# f762e1149291405c8c6873d6edcdf913
msgid "양호"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# eb49d9ec2a364e3a85679f5aa8b635f4
msgid "개발 수준"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 4aaa055852a34db8b8baef3b6a8da707
msgid "안정적인 제품을 제공하는 단계에 이름"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 4dfca1ec92fe436694b75282851e0d2b
msgid "장점"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 6d86c5c427c848bbb1c5d1ebff6dbe81
msgid "괜찮은 데이터 모델이면서 좋은 분석 도구 기능들을 갖추고 있음. 주로 batch 로드된 대량 데이터셋에 대해 신속하게 쿼리하는 데 사용되도록 설계되었으며, 이 점에서 탁월한 성능을 보임."
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 6cb8539403ba4493bff2c0356cbf1490
msgid "단점"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 33e5005f4b2147d796b9724d7b783e1a
msgid "시스템 운용이 힘듦. 쓰기 처리 속도가 아주 빠르지는 않음. 실시간 ingestion 셋업이 까다로움"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:129
# b0a84441bd6b416f89ea2d82bf1472ca
msgid "DB-Engines의 Druid 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:131
# d46709212844427794e7cba84d04dd4e
msgid "온라인 웹사이트 DB Engines\\ [#f3]_\\에서는 다양한 데이터베이스 관리 시스템(DBMS)의 시장 인기도를 매달 평가하며, 이때 다음과 같은 지표를 사용합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:133
# dc7f66b22d2a474d9299fc357ed12a0b
msgid "인터넷에서 언급되는 횟수: Google, Bing, Yandex에서의 검색 결과로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:134
# 701adbd8675c4403a7cfae925dfd3cbc
msgid "일반적인 관심: Google Trends에서의 검색 빈도를 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:135
# a391bf1624384777b990fe941121ef2d
msgid "기술 토론 빈도: 유명 IT 관련 Q&A 사이트인 Stack Overflow 및 DBA Stack Exchange 포스팅 현황을 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:136
# 98b3e6c8d29744a688cb2b5c6189542c
msgid "구인 게시글 수: Indeed 및 Simply Hired의 게시글을 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:137
# 95333d1f7f3243e28f8a6774075769f5
msgid "해당 커리어를 지닌 인재의 수: LinkedIn 및 Upwork에 게시된 프로필을 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:138
# b5d633a576a24447807df7b683c1bf5f
msgid "SNS에서의 언급 수: Twitter의 트윗수를 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:140
# 00a8abb98782486899aafac39468596f
msgid "그 결과 Druid는 2018년 7월 기준으로 총 343개 시스템 중에서 118위를 차지하였고, 그 중 시계열 데이터베이스 시스템만을 두고 집계했을 때 총 25개 시스템 중 7위를 차지하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:143
# dead9a64772a4632b92a8ceeb2dcca1b
msgid "Apache Spark와의 비교"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:145
# 94303c31d94d4b4fb0e2b251a894de1e
msgid "Druid를 Apache Spark와 비교하는 것은 상당히 의미 있는 작업입니다. 둘 다 차세대 대용량 데이터 분석 솔루션으로 각광 받고 있으며, 서로 다른 장점을 가지고 있어 매우 상호보완적으로 조합이 가능하기 때문입니다. Metatron에서도 Druid를 데이터 저장/처리용 엔진으로 사용하고 Spark를 고급 분석용 모듈로 사용함으로써 이들 간의 시너지를 잘 활용하고 있습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:147
# 336b4c88119348198dd11ade1cec79b7
msgid "여기서는 Sparkline Data Inc.의 창업자 Harish Butani가 공개한 Druid vs Spark 성능 비교 보고서\\ [#f4]_\\ [#f5]_\\의 내용을 간단히 소개합니다. 보고서에서는 애초에 두 솔루션이 경쟁 관계에 있다기 보다는 상보적인 역할을 한다고 상정을 하고 성능 비교를 시작합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:150
# 274a9b0c50d1423f9a906318cbd88c08
msgid "Apache Spark의 특징"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:152
# f4712d296f7f4b88b447c79f54ca9f8d
msgid "Apache Spark는 오픈소스 클러스터 컴퓨팅 프레임워크로서 Java, Scala, Python, R 언어로 이루어진 다양한 API를 제공합니다. Spark의 프로그래밍 모델은 SQL, 머신러닝, 그래프 프로세싱을 결합한 분석 솔루션을 구축하는 것입니다. Spark는 규모가 크거나 복잡한 데이터를 가공할 수 있도록 강력한 기능들을 지원하지만, Druid와 같은 interactive한 쿼리 처리에 최적화되지는 않았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:155
# 4eb466c765804327a269182a5a8e3863
msgid "데이터셋, 쿼리, 성능 비교 결과"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:157
# aa44e4e5e7074504969f40ffab4648f3
msgid "본 성능 비교를 위한 데이터셋으로 TPCH 10G benchmark data set을 이용했습니다. 본래 이 데이터셋은 관계형 데이터베이스에 적합한 스타 스키마 구조를 갖기 때문에 이를 역정규화시킨 후 Druid와 Spark에서 처리할 수 있도록 재구성하였습니다. 이러한 처리를 거친 데이터셋의 크기는 각각 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:159
# fd3127611fcc4e02adfaf1d894fdd205
msgid "TPCH Flat TSV: 46.80GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:160
# d27b4d83441a4769a3b3d61d9d3894a1
msgid "Druid Index in HDFS: 17.04GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:161
# d00ba123c7bc42f199f5b32b72253cb1
msgid "TPCH Flat Parquet: 11.38GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:162
# d6b4e7f16143454ca6e49673858521a6
msgid "TPCH Flat Parquet Partition by Month: 11.56GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:164
# 39d8a7fa6552490d8b5ccc5a83eafa56
msgid "그런 다음 두 솔루션의 쿼리 처리 속도를 다각도에서 분석할 수 있는 여러 쿼리를 아래와 같이 구성하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:166
# 5434312a75d343a49bee6d3f81aa2d94
msgid "Druid와 Apache Spark의 query latency 비교 평가에 사용된 쿼리 내역"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# a487879a5972459d917111c1fa33a76e
msgid "Query"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 37f558553c4e4ca3a8cb5f607b124421
msgid "Interval"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 5cd3240a81b540c98d3351a60909114c
msgid "Filters"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 493ac672adc641de8ff3c7edf4e71b24
msgid "Group By"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 33ab9967cd114104a0e3ef0d1a8e1abe
msgid "Aggregations"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 4db2d2171003442dbe2b485eb9098b9e
msgid "Basic Aggregation."
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 09d3b7627e954504875e04f0286802ea
# 02c7ed974d564d13ae308551735939c5
# 7bc9cf2caf3e40ed84727322e1ea1f2a
# ac1e1ec455ae442487e779603d0f8e1f
# 31029075cf904c7db1e0a93daea8775e
# 9158e3e73dff437d952535063d2ec4f6
# badb08d7e2824dc1bc65dbdff64229fc
# 16ace4936d3749aa866e09e81f58166d
msgid "None"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# ec752f697df7416ea5cd74274f0ea747
# 44d3ce3b396e4e288bd358eebbd5dee6
# d6d73eaf7bdb4e0484f37e60dc730c1a
msgid "ReturnFlag :raw-html:`<br />` LineStatus"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 7faa169965534e87bb1ac6b784839704
msgid "Count(*) :raw-html:`<br />` Sum(exdPrice) :raw-html:`<br />` Avg(avlQty)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# a9b5b62d07664b0eac51c40a67f6e59e
msgid "Ship Date Range"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# e50d49df67c2431786657721cacf71fc
# 7be6bf4b53b34d94902d0fa17bec6f0c
msgid "1995-12/1997-09"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 5c802d794a214288807f35da68259078
msgid "Count(*)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 37e7015e12584fdb8e34a4ffd86361e7
msgid "SubQry :raw-html:`<br />` Nation, pType :raw-html:`<br />` ShpDt Range"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 242ab499876944f29320719bb1b763df
msgid "P_Type :raw-html:`<br />` S_Nation + :raw-html:`<br />` C_Nation"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 1ef6ce2fd348413abae8c23034a1756d
# 95f767075ad845c1963d74cab854fad9
msgid "S_Nation"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 19c0118abf32438f801a82b813813210
# 081ffec03d254a9ba8d207cebf452e9e
msgid "Count(*) :raw-html:`<br />` Sum(exdPrice) :raw-html:`<br />` Max(sCost) :raw-html:`<br />` Avg(avlQty) :raw-html:`<br />` Count(Distinct oKey)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# a2334f1de65543689b995781a5668b2d
msgid "TPCH Q1"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# ed10d19525e34b138910ea27a5b4aa14
msgid "TPCH Q3"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 9ce96a8737514b07b654bc287c5916c6
msgid "1995-03-15-"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 66bde831b81b4f83a8a384138d1fe1a5
msgid "O_Date :raw-html:`<br />` MktSegment"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# a97120f7707e4908a643a3a33bb4fc60
msgid "Okey :raw-html:`<br />` Odate :raw-html:`<br />` ShipPri"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 3cb829e3562848fd8e0447e7e44c4761
# e3cdac09662b42e88bbad840129bb1e8
# d7d2216c44144eb8abb742b285371249
# ff114799f55e48b0a9347d3d9e2c5567
msgid "Sum(exdPrice)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# f21c5bdb2ef440e79194851b168ac72a
msgid "TPCH Q5"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 4735846e42434de1948ac61d0eb04d66
msgid "O_Date :raw-html:`<br />` Region"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 5bd42e8467464c8ebc518d912e67d056
msgid "TPCH Q7"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 354daade47e94334ac1ddbd1fcdab07b
msgid "S_Nation + :raw-html:`<br />` C_Nation"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# f9ba493a1abb446ab431146b2e513ebd
msgid "S_Nation :raw-html:`<br />` C_Nation :raw-html:`<br />` ShipDate.Year"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 9ad6005f717446b195b01dc601e138a9
msgid "TPCH Q8"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# c77cfd4cf9114e088c340757adaf351c
msgid "Region :raw-html:`<br />` Type :raw-html:`<br />` O_Date"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# ddc42a56dd5c4228b4e9f6d86c5b1110
msgid "ODate.Year"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:171
# 1ddec45a92f6444fbe8d82d6f3ffb958
msgid "테스트 결과는 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:177
# f2abd1879d8d4235a6814b4c1046d8db
msgid "Source: Combining Druid and Spark: Interactive and Flexible Analytics at Scale"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:179
# ed422fff1a7144319379bdedb5c03a51
msgid "Filters + Ship Date 쿼리는 Druid에 특화된 slice-and-dice 성능을 테스트하는 것이었고, 예상대로 무려 50배 이상 속도 상에 우위를 보였습니다. 마찬가지로 TPCH Q7 쿼리를 처리하는 데도 Druid에서 수 밀리초가 소요된 반면, Spark에서는 수초가 소요되었습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:180
# d3a192b8df7744f2903b13bbb23d8493
msgid "TPCH Q3, Q5, Q8 쿼리의 경우에는 Druid가 위 경우와 같은 극대화된 효율성을 보여주지 못했습니다. OrderDate 술어는 Druid에서 JavaScript 필터로 번역이 되는데, 이는 네이티브 Java 필터에 비해 현저히 느리기 때문입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:181
# 655029a3c9c54b58bb973f76ad036ae1
msgid "Basic Aggregation 및 TPCH Q1 쿼리의 경우에도 Druid에서 훨씬 빠른 처리 속도를 보여주었습니다. Druid에서는 Count-Distinct 동작이 cardinality aggregator로 번역이 되는데, 이는 approximate count에 해당합니다. 이러한 장점 덕에 Druid는 cardinality가 큰 차원들을 탐색할 때 유리합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:183
# 2943c069764548618b51be53902171cc
msgid "여러 가지 조건에 따라 결과는 달라질 수 있지만, 한 가지 분명한 것은 시간 파티셔닝(time partitioning) 또는 차원 술어(dimensional predicates)를 포함하는 쿼리는 Druid에서 현저히 빠르게 처리한다는 것입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:187
# cc4bbfe91d2b4821b5bab4511f2a96d8
msgid "시사점"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:189
# 8f4b7cbe2ad04d599484aca62892d561
msgid "이러한 테스트 결과는 Druid의 초고속 쿼리 처리 능력과 Spark의 고급 분석 기능을 결합하면 아주 훌륭한 시너지 효과를 기대할 수 있음을 시사합니다. Druid를 통해 신속하고 효율적으로 분석에 필요한 데이터만 추려낸 후 Spark의 풍부한 프로그래밍 API들을 활용하여 심층적인 분석을 실시하는 것입니다. 이렇게 함으로써 강력하고 유연하며 쿼리 latency가 매우 낮은 분석 솔루션을 구축할 수 있습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:192
# d635df3285e84bd2bf36e8f96370d75d
msgid "참고자료"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:193
# 67dec51e94094e8f98bc4857447e1769
msgid "Yang, E. Tschetter, X. Léauté, N. Ray, G. Merlino, and D. Ganguli. (2014). `Druid: a real-time analytical data store`. Retrieved from http://druid.io/docs/0.12.1/design/index.html."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:194
# 0549297dbfb142778c677a18429f85fd
msgid "Steven Acreman. (2016, Aug 26). `Top 10 Time Series Databases`. Retrieved from https://blog.outlyer.com/top10-open-source-time-series-databases."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:195
# 79829b172e4642808e7454dae31de7ba
msgid "DB-Engines website. https://db-engines.com, July 2018."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:196
# ac102851a93746f896c492c262ee919c
msgid "Harish Butani. (2018, Sep 18). Combining Druid and Spark: Interactive and Flexible Analytics at Scale. Retrieved from https://www.linkedin.com/pulse/combining-druid-spark-interactiveflexible-analytics-scale-butani."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:197
# 612f153ed2a04eb9b8e00a816ab6658d
msgid "Harish Butani. (2015, Aug 28). TPCH Benchmark. Retrieved from https://github.com/SparklineData/spark-druid-olap/blob/master/docs/benchmark/BenchMarkDetails.pdf."
msgstr ""

