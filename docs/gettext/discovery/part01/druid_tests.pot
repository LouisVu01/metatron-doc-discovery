# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, SK Telecom
# This file is distributed under the same license as the Metatron User Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Metatron User Manual 0.4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-11 16:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../discovery/part01/druid_tests.rst:2
# 62f10b4883374cac9b6f3a7b9d64008a
msgid "Druid 성능 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:7
# 46b22c93ae72496c83657a882d5ad2a2
msgid "Druid는 '실시간' 탐색이 가능한 데이터 스토어를 지향하는 만큼 수치화된 성능을 평가함에 있어서는 다음의 두 가지 측면에 초점이 맞춰집니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:9
# 9ab0739f35d14c199da80b49be238599
msgid "Query latency"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:10
# 17b2d497ed2a4316b182526626c0c5f5
msgid "Ingestion latency"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:12
# 90eaa5c0593d42b8bd82969393a1a305
msgid "쿼리 처리와 ingestion에서 소요되는 시간을 최소화하는 것이 '실시간'을 이루는 핵심이 되기 때문입니다. 지금까지 Druid 개발진을 비롯한 여러 기관 및 개인이 이러한 기준으로 Druid 성능을 평가한 benchmark들을 산출하고 그 밖의 지표를 통해 Druid를 다른 데이터베이스 관리 시스템들과 비교한 결과를 공개하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:16
# 4c252f95f09c486da479f73204c47cd7
msgid "Druid 개발진의 자체 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:18
# 90c9c1fc33f243d4a30f4fe1557d80f4
msgid "Druid 개발진이 2014년 발표한 백서 'Druid: A Real-time Analytical Data Store'[#f1]_\\의 Chapter 6 Performance에서는 Druid의 query 및 ingestion latency를 다방면에서 평가한 결과를 상세하게 설명하고 있습니다. 본 절에서는 이 중에서 Druid의 성능을 직관적으로 살펴볼 수 있는 지표 위주로 간단히 소개합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:21
# 6f4b47c71a8b4378a5aa280c9a9a984e
msgid "Query latency 성능"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:23
# 892b5ae30893464b8a9925efd86902fe
msgid "Druid의 query latency 성능에 대해 백서에서는 현장에서 실제 사용되는 데이터셋 8종과 TPC-H 데이터셋에 대한 쿼리 결과를 기준으로 평가하였는데, 여기서는 TPC-H 데이터셋에 대한 쿼리 결과를 소개합니다. TPC-H 데이터셋에 대한 query latency는 MySQL과의 비교 평가 방식으로 진행하였고, 이때 사용한 클러스터 사양은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:25
# 4e3845aacf454cd39b830353db96061b
msgid "**Druid historical 노드:** Amazon EC2 m3.2xlarge instance types (Intel® Xeon® E5-2680 v2 @ 2.80GHz)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:26
# cfe42c5ac3a94403980164283d77d3f9
msgid "**Druid broker 노드:** c3.2xlarge instances (Intel® Xeon® E5-2670 v2 @ 2.50GHz)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:27
# 83181d91166542988a7e1ce497e44849
msgid "**MySQL Amazon RDS instance** (Druid와 동일한 m3.2xlarge instance type)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:29
# 3a620f389bb24015b495f28be229cd18
msgid "아래는 단일 노드에서의 1GB 및 100GB TPC-H 데이터셋에 대한 Druid와 MySQL의 query latency를 비교한 결과를 정리한 그래프입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:35
#: ../../discovery/part01/druid_tests.rst:45
#: ../../discovery/part01/druid_tests.rst:62
# efa539dd5d234c30b1622fee65c203d8
# 2784fd8ebcd84e66ae153401f9f8c224
# 281c489b27bc46aeb601894106d4c2c4
msgid "Source: Druid: A Real-time Analytical Data Store"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:37
# e1fb844967eb48a39a15849893b3865e
msgid "이러한 결과는 Druid의 도입으로 기존 관계형 데이터베이스 시스템에 비해 획기적으로 빠른 쿼리 속도를 낼 수 있음을 시사합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:39
# 8327468369b4489f8004e50aa0ffce28
msgid "또한 여러 노드를 엮어서 클러스터를 구성할 경우 쿼리 처리 속도가 어느 정도 향상되는지도 측정하였습니다. 쿼리 대상 데이터셋으로서 100GB TPC-H를 사용하였으며 단일 노드(8개 코어)와 6개 노드 클러스터(48개 코어) 간의 성능 차이는 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:47
# 399693f9fd054058858c4ab0f78fbcb6
msgid "모든 쿼리가 linear scalability를 달성하지는 않았으나 상대적으로 단순한 쿼리들의 경우에는 거의 코어 수에 정비례하는 처리 속도 증대를 보여주었습니다(SK텔레콤 Metatron에서는 더욱 뚜렷한 linear scalability를 달성할 수 있도록 기능을 보강하였습니다)."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:50
# 3c88a81c732a4569a7d7e1e14046db4f
msgid "Ingestion latency 성능"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:52
# 0b80e1fad3544558aeba5c19981d0246
msgid "Druid의 ingestion 성능에 대해서도 평가하였는데, 이때 사용된 클러스터 환경은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:54
# 510215cb04ea4a8ea8ad223f45c10f1d
msgid "6개 노드, 총 메모리 360GB 및 96개 코어(12 x Intel® Xeon® E5-2670)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:56
# 1767318dfc164b988a903638bfeff7d5
msgid "ingestion 대상으로는 현장에서 실제 사용되는 데이터 소스 8종이었으며 데이터 소스 각각의 특징과 ingestion 결과는 아래와 같았습니다. 참고로 ingestion 측정을 하는 기간 동안 해당 클러스터에서는 그 외 다른 데이터 소스에 대한 ingestion 동작도 병행해서 실시하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:64
# 0387fe75580e4f1c956d98ef2d1fb45a
msgid "데이터 ingestion 속도는 데이터의 복잡성 등 여러 가지 변수의 영향을 받지만, 측정 결과를 놓고 볼 때 대체로 'interactivity'라는 Druid의 개발 목표에 부합한다고 할 수 있습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:68
# bdfb58b5c2bb4dcb8631a08ad8baf09f
msgid "SK텔레콤의 Druid 성능 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:70
# 4eab285d096d43fabd3c60a5adf0118a
msgid "SK텔레콤에서는 다음과 같이 Druid의 query latency와 ingestion latency를 측정하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:73
# b455da4fbd434d9ba384d4116bafc300
msgid "Query latency 테스트"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:75
# 3fa4618a17894469a3e95d2ac2e9f5b4
msgid "Query latency를 측정하는 조건은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:77
# b7b02976f8674cf8a1af84088b4662dc
msgid "데이터: TPC-H 100G dataset (9억 rows)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:78
# 2149652f393c4b18b3c27a59cdf3e8c4
msgid "Pre-aggregation 기준: day"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:79
# c4ccfed58cb4446f997a3cd6a6cbc050
msgid "서버: r3.4xlarge nodes, (2.5GHz * 16, 122G, 320G SSD) * 6"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:80
# fd0c1131ece74aa0b50566983098a31a
msgid "Historical 노드 개수: 6개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:81
# 3bca74f2aad04b948309b6307fd6e9e2
msgid "Broker 노드 개수: 1개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:83
# cb5e505665834cb39c3ee8dd0192cb1e
msgid "그 결과 TPC-H 100G dataset의 5개 쿼리의 반환 속도는 다음과 같았습니다(Hive의 쿼리 처리 속도도 참조용으로 함께 측정하였습니다)."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:89
#: ../../discovery/part01/druid_tests.rst:113
# afa0cf9270804a59a32ed2099f1f55b8
# 0d07669cf0f34502808bc82eb9b44826
msgid "Source: SK Telecom T-DE WIKI Metatron Project"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:92
# d793237e920d43198bbce325635c882a
msgid "Hive의 benchmark가 현저하게 떨어지는 원인 중 일부는 Thrift로 측정한 것과 partition없이 test set이 구성되어 있기 때문입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:95
# 5b26291c6ecf4ccb8b514e1358ccb4ad
msgid "Ingestion latency 테스트"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:97
# 962cb129ee4c42c9a2d66951ee378eb4
msgid "Ingestion latency를 측정하는 조건은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:99
# ddf51010c752498297498362892a38f3
msgid "Ingestion data size: 1일 30억 rows, 10 columns"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:100
# 7c044bf20f0e4fff86647af962720f82
msgid "메모리: 512 GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:101
# fc095b033fed4f8085a36fdb7b7ea170
msgid "CPU: Intel (R) Xeon (R) Gold 5120 CPU @ 2.20 GHz (core 56개)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:102
# 8e2d37f3557740c3a4aec55cbab365e6
msgid "Historical 노드 개수: 100개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:103
# ec12e4f59bea4c66b5081841dd389bdd
msgid "Broker 노드 개수: 2개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:104
# d79d04fd6b87421f896cb9bacaea2253
msgid "총 10개의 middle manager 노드 중 3개에서 job 수행"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:105
# 7710b867b35046928e20e0a5edad3811
msgid "Ingestion 도구: Apache Kafka"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:107
# 47879193e4b94728a2e8f04d5bb24e31
msgid "이와 같은 조건으로 data ingestion을 100회 수행하였고 평균 ingestion latency는 1.623439초였습니다. 여기서 ingestion latency는 아래 도식화한 것과 같이 Kaka ingestion, Druid ingestion, Druid query 처리에 소요되는 시간을 모두 합산한 것입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:116
# c99b589a0a484aa4972693f794b00dcb
msgid "Druid에 대한 제3자의 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:119
# d0a5502317c4490589b6cae3457c2fe5
msgid "Outlier의 Druid 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:121
# 89155654fc494203bf281b116a11729e
msgid "다음은 Outlier 블로그에 2016년 8월 26일에 게재된 Top 10 Time Series Databases라는 포스트\\ [#f2]_\\에서는 20개의 주요 오픈소스 시계열 데이터베이스 시스템을 평가하였습니다. 기고자인 Steven Acreman이 개인적으로 매긴 성능 랭킹에서 Druid는 20개 중 9위를 차지하였는데, 여기서 밝힌 Druid의 주요 성능은 다음과 같습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:123
# 0c2ab79b543c49229624538bf2f14876
msgid "Outlier의 주요 Druid 평가 내용"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 0a46156b7ff842c0a4431713f66aaeac
msgid "평가 기준"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# b84e233d51e04410b310d479163fc972
msgid "Druid의 성능"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 4f6b9f1590c94bd9935b02d8a0b71485
msgid "쓰기 성능 - 단일 노드"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 38ac8105aa204383a07810318b9bd8c7
msgid "25k metrics/sec :raw-html:`<br />` 출처: https://groups.google.com/forum/#!searchin/druid-user/benchmark%7Csort:relevance/druid-user/90BMCxz22Ko/73D8HidLCgAJ"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 71f580a277a841e0b93451577e4d9ad6
msgid "쓰기 성능 - 5개 노드 클러스터"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# d607b8a63af048518eadef44057282f7
msgid "100k metrics/sec (추산 결과)"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 5db9252d842345a9a9ce0778c097b127
msgid "쿼리 성능"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# dc6e67cabe5043e4860569f77eee0790
msgid "양호"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# fb496b2e71eb4968a6bfbe789fd8c4d5
msgid "개발 수준"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# eb50ab03e5c44bceae1b766798bf8b7d
msgid "안정적인 제품을 제공하는 단계에 이름"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 81262dcba5c0417281c2fdfac60f45d6
msgid "장점"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# ddf88014ab354bd7aceded08b42eca14
msgid "괜찮은 데이터 모델이면서 좋은 분석 도구 기능들을 갖추고 있음. 주로 batch 로드된 대량 데이터셋에 대해 신속하게 쿼리하는 데 사용되도록 설계되었으며, 이 점에서 탁월한 성능을 보임."
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 6f11260e9cd941909f57e785776719b3
msgid "단점"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# d58b18db3a4f4054a54dea9a4de924a0
msgid "시스템 운용이 힘듦. 쓰기 처리 속도가 아주 빠르지는 않음. 실시간 ingestion 셋업이 까다로움"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:129
# c650aeddbeaa47f48a87fa509bb97a51
msgid "DB-Engines의 Druid 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:131
# e594d2a4118f484cb0a9b70fa6e58765
msgid "온라인 웹사이트 DB Engines\\ [#f3]_\\에서는 다양한 데이터베이스 관리 시스템(DBMS)의 시장 인기도를 매달 평가하며, 이때 다음과 같은 지표를 사용합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:133
# b6b79bcb513b4079be3da62bfa46c4e9
msgid "인터넷에서 언급되는 횟수: Google, Bing, Yandex에서의 검색 결과로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:134
# 78b0539872f441b4b9cbfd27d46c43fa
msgid "일반적인 관심: Google Trends에서의 검색 빈도를 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:135
# e2b4bc8ee66c4e9d8b8ee5b015817fab
msgid "기술 토론 빈도: 유명 IT 관련 Q&A 사이트인 Stack Overflow 및 DBA Stack Exchange 포스팅 현황을 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:136
# 0e2b27f925924c5689462764f4d340d1
msgid "구인 게시글 수: Indeed 및 Simply Hired의 게시글을 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:137
# 0b4c02245c964b7bb78b49fbf87289ac
msgid "해당 커리어를 지닌 인재의 수: LinkedIn 및 Upwork에 게시된 프로필을 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:138
# 2fa1f838445d414caba85c2f23dc22de
msgid "SNS에서의 언급 수: Twitter의 트윗수를 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:140
# 21f3918721c24c9db89c8977b973e9c7
msgid "그 결과 Druid는 2018년 7월 기준으로 총 343개 시스템 중에서 118위를 차지하였고, 그 중 시계열 데이터베이스 시스템만을 두고 집계했을 때 총 25개 시스템 중 7위를 차지하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:143
# 247ceca2cd7e440d935bb71bdb1c3102
msgid "Apache Spark와의 비교"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:145
# 4251fc9710d54997b78adac8f98011de
msgid "Druid를 Apache Spark와 비교하는 것은 상당히 의미 있는 작업입니다. 둘 다 차세대 대용량 데이터 분석 솔루션으로 각광 받고 있으며, 서로 다른 장점을 가지고 있어 매우 상호보완적으로 조합이 가능하기 때문입니다. Metatron에서도 Druid를 데이터 저장/처리용 엔진으로 사용하고 Spark를 고급 분석용 모듈로 사용함으로써 이들 간의 시너지를 잘 활용하고 있습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:147
# a2a955f5ecc04a5b8988922be37c6c59
msgid "여기서는 Sparkline Data Inc.의 창업자 Harish Butani가 공개한 Druid vs Spark 성능 비교 보고서\\ [#f4]_\\ [#f5]_\\의 내용을 간단히 소개합니다. 보고서에서는 애초에 두 솔루션이 경쟁 관계에 있다기 보다는 상보적인 역할을 한다고 상정을 하고 성능 비교를 시작합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:150
# 4f5ff23083f440088e6dce7b67ff1964
msgid "Apache Spark의 특징"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:152
# 0645eecd9ae24745a4ab44f08d981381
msgid "Apache Spark는 오픈소스 클러스터 컴퓨팅 프레임워크로서 Java, Scala, Python, R 언어로 이루어진 다양한 API를 제공합니다. Spark의 프로그래밍 모델은 SQL, 머신러닝, 그래프 프로세싱을 결합한 분석 솔루션을 구축하는 것입니다. Spark는 규모가 크거나 복잡한 데이터를 가공할 수 있도록 강력한 기능들을 지원하지만, Druid와 같은 interactive한 쿼리 처리에 최적화되지는 않았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:155
# 7b44123ac2fa4d019468ead0e8f707fe
msgid "데이터셋, 쿼리, 성능 비교 결과"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:157
# 2c0f611c02b049a1b24b165f5fc1a342
msgid "본 성능 비교를 위한 데이터셋으로 TPCH 10G benchmark data set을 이용했습니다. 본래 이 데이터셋은 관계형 데이터베이스에 적합한 스타 스키마 구조를 갖기 때문에 이를 역정규화시킨 후 Druid와 Spark에서 처리할 수 있도록 재구성하였습니다. 이러한 처리를 거친 데이터셋의 크기는 각각 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:159
# 7ba3ff0ca47940e88316eb6b1ef1fefe
msgid "TPCH Flat TSV: 46.80GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:160
# a49a5bbb497f4857828bc30b5c371ffe
msgid "Druid Index in HDFS: 17.04GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:161
# e422b6430905410883ca005bebe16323
msgid "TPCH Flat Parquet: 11.38GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:162
# c2a16e5e330d40a0bd9f3712e7d0a46d
msgid "TPCH Flat Parquet Partition by Month: 11.56GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:164
# 4fed1190fabc4f5f8d7d667b9e29c172
msgid "그런 다음 두 솔루션의 쿼리 처리 속도를 다각도에서 분석할 수 있는 여러 쿼리를 아래와 같이 구성하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:166
# 2603eea208c94ee7ae3aba13efa88016
msgid "Druid와 Apache Spark의 query latency 비교 평가에 사용된 쿼리 내역"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 8a67cf3c4c044685ae3044e34de4fdb3
msgid "Query"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 244743094c9047f2a91d0e28d1917a91
msgid "Interval"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# bbf0cc16e5344672b8a57dddf8c44287
msgid "Filters"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 1e8fdcd7b5454608b51792ddd8774c5b
msgid "Group By"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# ac729893994346d38faba64ca5eb2717
msgid "Aggregations"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 51aa84b1b6c845728126f5e8f3f91d98
msgid "Basic Aggregation."
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# d07148e4613d415aaac8a72f898b5659
# ef02cdb777a04b199bb093150518fdfd
# 5ee46f3bad9f4a338b87bd519710cf7f
# 158af6c83cb0466299f5c7f23899c47f
# a849fef113cf4f0d82ff3d21cd6eb123
# 048eb7fcab8f42d7a3902eaf3828a3c6
# 9c7aa9e550734c1a8f5febdc7371ec1a
# cde1b169dd7b491bb34b67fbc4048171
msgid "None"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 50645d9b347a44f18e4e333257c2ce8c
# 66782f4c0f1344eb91977922a21d72cc
# fb0548172b7c45d387d6508667a049ea
msgid "ReturnFlag :raw-html:`<br />` LineStatus"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 767252ed7b7541208347cbe0daf46bef
msgid "Count(*) :raw-html:`<br />` Sum(exdPrice) :raw-html:`<br />` Avg(avlQty)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# dc9e61d6dde64d26a0f42af463ca8173
msgid "Ship Date Range"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 6202c7a33d2d40f89cc65a88e4c624fd
# 569221a56e3842b9a8b28e6d7ad832a6
msgid "1995-12/1997-09"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 6d73d1d83ea1409181a52a7c6f24f9f3
msgid "Count(*)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# daba50e3adc0479c8523c28dee4831e6
msgid "SubQry :raw-html:`<br />` Nation, pType :raw-html:`<br />` ShpDt Range"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 35f81138e64b46c49e666f53887b96fa
msgid "P_Type :raw-html:`<br />` S_Nation + :raw-html:`<br />` C_Nation"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 069331db07884f42a65418900b567e8a
# 3241aece14ef4721b652a2bf3b46e6b1
msgid "S_Nation"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 675a01ce2974442a9edf75f7fa26c74b
# 13d8caea4d274d1d84b3321a680a7046
msgid "Count(*) :raw-html:`<br />` Sum(exdPrice) :raw-html:`<br />` Max(sCost) :raw-html:`<br />` Avg(avlQty) :raw-html:`<br />` Count(Distinct oKey)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 228f816d4d5b43168430cbde6962b0b8
msgid "TPCH Q1"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 609af642894b4436b5519de76e4a3e91
msgid "TPCH Q3"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# fc679671b0d54798a0f9427b1cef4c9d
msgid "1995-03-15-"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 825ae26d17924659ad6bbd776474912a
msgid "O_Date :raw-html:`<br />` MktSegment"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 5b87119e05d34b1689f3bbf74ce5985a
msgid "Okey :raw-html:`<br />` Odate :raw-html:`<br />` ShipPri"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 6de57a3cefbd4b068bd204fa34bc6d22
# 21cf881a17cb4c2aac56af54fb968f60
# e956e6b013c447559d0b5764382cbd01
# eca18ba7c41a487a94af07289a84d011
msgid "Sum(exdPrice)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# c3d89a93e77944e39ef8aa20ed0a2791
msgid "TPCH Q5"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 0aa80842db3a46b98c161005424bf37e
msgid "O_Date :raw-html:`<br />` Region"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 267b71fcbce54191870810ccd78ec18e
msgid "TPCH Q7"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 4fd7d78d8e864389846671a511bee55c
msgid "S_Nation + :raw-html:`<br />` C_Nation"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 4b2e23cbf12e496692b3080edd0c6845
msgid "S_Nation :raw-html:`<br />` C_Nation :raw-html:`<br />` ShipDate.Year"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# f52d6e4276ba477eb1404d13c0c0438b
msgid "TPCH Q8"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# cb0fbed61d1b43b68223112bb048ed75
msgid "Region :raw-html:`<br />` Type :raw-html:`<br />` O_Date"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 094ef7ad2bb140769e868b429707e979
msgid "ODate.Year"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:171
# 8afe35211cf843a592b149c2d4f75d9f
msgid "테스트 결과는 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:177
# 950dec0f59b9489b8e42e356ec953cae
msgid "Source: Combining Druid and Spark: Interactive and Flexible Analytics at Scale"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:179
# 5a466a1213a6451eb8290594d2008bbf
msgid "Filters + Ship Date 쿼리는 Druid에 특화된 slice-and-dice 성능을 테스트하는 것이었고, 예상대로 무려 50배 이상 속도 상에 우위를 보였습니다. 마찬가지로 TPCH Q7 쿼리를 처리하는 데도 Druid에서 수 밀리초가 소요된 반면, Spark에서는 수초가 소요되었습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:180
# 26d3ffd7865645e484fb5a49dc628204
msgid "TPCH Q3, Q5, Q8 쿼리의 경우에는 Druid가 위 경우와 같은 극대화된 효율성을 보여주지 못했습니다. OrderDate 술어는 Druid에서 JavaScript 필터로 번역이 되는데, 이는 네이티브 Java 필터에 비해 현저히 느리기 때문입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:181
# 33ea47959d04415792af7c8866415399
msgid "Basic Aggregation 및 TPCH Q1 쿼리의 경우에도 Druid에서 훨씬 빠른 처리 속도를 보여주었습니다. Druid에서는 Count-Distinct 동작이 cardinality aggregator로 번역이 되는데, 이는 approximate count에 해당합니다. 이러한 장점 덕에 Druid는 cardinality가 큰 차원들을 탐색할 때 유리합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:183
# e75dd909c368411b9b349bf5ab607083
msgid "여러 가지 조건에 따라 결과는 달라질 수 있지만, 한 가지 분명한 것은 시간 파티셔닝(time partitioning) 또는 차원 술어(dimensional predicates)를 포함하는 쿼리는 Druid에서 현저히 빠르게 처리한다는 것입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:187
# 7a87316341e2466bbfbe94ef6649c409
msgid "시사점"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:189
# b8901e1ff81443939bda406290bbde17
msgid "이러한 테스트 결과는 Druid의 초고속 쿼리 처리 능력과 Spark의 고급 분석 기능을 결합하면 아주 훌륭한 시너지 효과를 기대할 수 있음을 시사합니다. Druid를 통해 신속하고 효율적으로 분석에 필요한 데이터만 추려낸 후 Spark의 풍부한 프로그래밍 API들을 활용하여 심층적인 분석을 실시하는 것입니다. 이렇게 함으로써 강력하고 유연하며 쿼리 latency가 매우 낮은 분석 솔루션을 구축할 수 있습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:192
# e74db9f09653475ca6b0582358d0371c
msgid "참고자료"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:193
# 78b14f061c044d51a06b6c7cdf59705e
msgid "Yang, E. Tschetter, X. Léauté, N. Ray, G. Merlino, and D. Ganguli. (2014). `Druid: a real-time analytical data store`. Retrieved from http://druid.io/docs/0.12.1/design/index.html."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:194
# 2410208c226e4a9eaa375e6fe535fca2
msgid "Steven Acreman. (2016, Aug 26). `Top 10 Time Series Databases`. Retrieved from https://blog.outlyer.com/top10-open-source-time-series-databases."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:195
# c612f20c56764f678b597f32ba35b21b
msgid "DB-Engines website. https://db-engines.com, July 2018."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:196
# eb9b6a19bdea42f7b1b99cefe6a508c6
msgid "Harish Butani. (2018, Sep 18). Combining Druid and Spark: Interactive and Flexible Analytics at Scale. Retrieved from https://www.linkedin.com/pulse/combining-druid-spark-interactiveflexible-analytics-scale-butani."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:197
# d093398d17ab48fca2d43f442d21d481
msgid "Harish Butani. (2015, Aug 28). TPCH Benchmark. Retrieved from https://github.com/SparklineData/spark-druid-olap/blob/master/docs/benchmark/BenchMarkDetails.pdf."
msgstr ""

