# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, metatron team
# This file is distributed under the same license as the metatron discovery docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: metatron discovery docs 0.4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 01:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../discovery/part01/druid_tests.rst:2
# 77d424338e464ca69892012c752e682b
msgid "Druid 성능 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:7
# faa9f8f71acb4b069a42b0271a963541
msgid "Druid는 '실시간' 탐색이 가능한 데이터 스토어를 지향하는 만큼 수치화된 성능을 평가함에 있어서는 다음의 두 가지 측면에 초점이 맞춰집니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:9
# 4a29d6d60b9c46f0a37a521c6ecb0d06
msgid "Query latency"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:10
# ab964b330ce84d7a96ea3422cb18d24f
msgid "Ingestion latency"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:12
# 7098858a4bf146dc86800194d4e07662
msgid "쿼리 처리와 ingestion에서 소요되는 시간을 최소화하는 것이 '실시간'을 이루는 핵심이 되기 때문입니다. 지금까지 Druid 개발진을 비롯한 여러 기관 및 개인이 이러한 기준으로 Druid 성능을 평가한 benchmark들을 산출하고 그 밖의 지표를 통해 Druid를 다른 데이터베이스 관리 시스템들과 비교한 결과를 공개하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:16
# 5d4da9c69d81468ebb425d9b7ead4ead
msgid "Druid 개발진의 자체 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:18
# 89301a4610214cdc9119120bbbe53a6a
msgid "Druid 개발진이 2014년 발표한 백서 'Druid: A Real-time Analytical Data Store'[#f1]_\\의 Chapter 6 Performance에서는 Druid의 query 및 ingestion latency를 다방면에서 평가한 결과를 상세하게 설명하고 있습니다. 본 절에서는 이 중에서 Druid의 성능을 직관적으로 살펴볼 수 있는 지표 위주로 간단히 소개합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:21
# 180cf910a8544e25907d414341550314
msgid "Query latency 성능"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:23
# ec7182fa52c64b5189b22c766e0d4afe
msgid "Druid의 query latency 성능에 대해 백서에서는 현장에서 실제 사용되는 데이터셋 8종과 TPC-H 데이터셋에 대한 쿼리 결과를 기준으로 평가하였는데, 여기서는 TPC-H 데이터셋에 대한 쿼리 결과를 소개합니다. TPC-H 데이터셋에 대한 query latency는 MySQL과의 비교 평가 방식으로 진행하였고, 이때 사용한 클러스터 사양은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:25
# 9e61b5f5edc54605898f91489ae0a2a5
msgid "**Druid historical 노드:** Amazon EC2 m3.2xlarge instance types (Intel® Xeon® E5-2680 v2 @ 2.80GHz)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:26
# 3b95a37b746449e68f0baee9008b91b3
msgid "**Druid broker 노드:** c3.2xlarge instances (Intel® Xeon® E5-2670 v2 @ 2.50GHz)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:27
# 9394bda83e1048a48dc908cc4ed76ce3
msgid "**MySQL Amazon RDS instance** (Druid와 동일한 m3.2xlarge instance type)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:29
# 209591d044764041bfe36d22286bd0f3
msgid "아래는 단일 노드에서의 1GB 및 100GB TPC-H 데이터셋에 대한 Druid와 MySQL의 query latency를 비교한 결과를 정리한 그래프입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:35
#: ../../discovery/part01/druid_tests.rst:45
#: ../../discovery/part01/druid_tests.rst:62
# 344cce5eb31d459bb7435bde2c3b105a
# e5fb1537f4514580b80f1c5505f1ea6c
# f0dc9284ffb64e7f9f43a56f8c35dcf2
msgid "Source: Druid: A Real-time Analytical Data Store"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:37
# ac83762364b14cb0ab70350f03acb913
msgid "이러한 결과는 Druid의 도입으로 기존 관계형 데이터베이스 시스템에 비해 획기적으로 빠른 쿼리 속도를 낼 수 있음을 시사합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:39
# 2cb97b2df16d4982803fbc42edefff81
msgid "또한 여러 노드를 엮어서 클러스터를 구성할 경우 쿼리 처리 속도가 어느 정도 향상되는지도 측정하였습니다. 쿼리 대상 데이터셋으로서 100GB TPC-H를 사용하였으며 단일 노드(8개 코어)와 6개 노드 클러스터(48개 코어) 간의 성능 차이는 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:47
# 97a642b4e9bc4fb7a0317d6e42ef0acb
msgid "모든 쿼리가 linear scalability를 달성하지는 않았으나 상대적으로 단순한 쿼리들의 경우에는 거의 코어 수에 정비례하는 처리 속도 증대를 보여주었습니다(SK텔레콤 Metatron에서는 더욱 뚜렷한 linear scalability를 달성할 수 있도록 기능을 보강하였습니다)."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:50
# 81a62126ceae47289a00cba9b3883abe
msgid "Ingestion latency 성능"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:52
# 66364a99fda64956b7494744369c60e6
msgid "Druid의 ingestion 성능에 대해서도 평가하였는데, 이때 사용된 클러스터 환경은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:54
# f5d69dadcc0548ac862ab7a4065af561
msgid "6개 노드, 총 메모리 360GB 및 96개 코어(12 x Intel® Xeon® E5-2670)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:56
# 43041cf2c8534d2d8bcc1fde12c84420
msgid "ingestion 대상으로는 현장에서 실제 사용되는 데이터 소스 8종이었으며 데이터 소스 각각의 특징과 ingestion 결과는 아래와 같았습니다. 참고로 ingestion 측정을 하는 기간 동안 해당 클러스터에서는 그 외 다른 데이터 소스에 대한 ingestion 동작도 병행해서 실시하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:64
# fb5095c7732d4e0c9fd666fc0f6ed11d
msgid "데이터 ingestion 속도는 데이터의 복잡성 등 여러 가지 변수의 영향을 받지만, 측정 결과를 놓고 볼 때 대체로 'interactivity'라는 Druid의 개발 목표에 부합한다고 할 수 있습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:68
# 01b5aca63f10496bbc4d18ff3e288e9b
msgid "SK텔레콤의 Druid 성능 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:70
# be76a67174c14aa7838f9b0718122917
msgid "SK텔레콤에서는 다음과 같이 Druid의 query latency와 ingestion latency를 측정하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:73
# 376227e57f8e4f629071071d4a010351
msgid "Query latency 테스트"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:75
# 8181aff47c4a4ad3901089e5d206abd8
msgid "Query latency를 측정하는 조건은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:77
# d40627404bb549cfaaaa92fa0125a405
msgid "데이터: TPC-H 100G dataset (9억 rows)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:78
# 7f3d3ecebf5a4e898e6a47107ee8076f
msgid "Pre-aggregation 기준: day"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:79
# 08624a966860494685059db492d3eaa9
msgid "서버: r3.4xlarge nodes, (2.5GHz * 16, 122G, 320G SSD) * 6"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:80
# 746f7af34f1e43fcb6a1514ae3759d73
msgid "Historical 노드 개수: 6개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:81
# b16e96f517e74a80bc2396dd3052cb9e
msgid "Broker 노드 개수: 1개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:83
# b9b122e66bc542a18bec808f636715a0
msgid "그 결과 TPC-H 100G dataset의 5개 쿼리의 반환 속도는 다음과 같았습니다(Hive의 쿼리 처리 속도도 참조용으로 함께 측정하였습니다)."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:89
#: ../../discovery/part01/druid_tests.rst:113
# 10705fbe44e34bcfb5ba5952e62b694f
# 79165facdcc547d2a2531a59d8dce6b1
msgid "Source: SK Telecom T-DE WIKI Metatron Project"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:92
# 8b3f8aba31c84c859ed6201345e53746
msgid "Hive의 benchmark가 현저하게 떨어지는 원인 중 일부는 Thrift로 측정한 것과 partition없이 test set이 구성되어 있기 때문입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:95
# 53b30ced810c4ba7abb0b2c1d62f5dc3
msgid "Ingestion latency 테스트"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:97
# 2de2906f20c846f496d5a861c4cbe4d0
msgid "Ingestion latency를 측정하는 조건은 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:99
# ab9c9ac76830402fb8361a43a6339549
msgid "Ingestion data size: 1일 30억 rows, 10 columns"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:100
# 223d9183285c4d3d950c1d39bc1b764d
msgid "메모리: 512 GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:101
# 95d6878533f249fcb8b1fb6c7614636d
msgid "CPU: Intel (R) Xeon (R) Gold 5120 CPU @ 2.20 GHz (core 56개)"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:102
# aef0e9d2fd1e4e9896ef853cc299be29
msgid "Historical 노드 개수: 100개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:103
# 47ad3b6ac4b04faca160fc9f269c5c24
msgid "Broker 노드 개수: 2개"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:104
# a3e1df6f08764dc281ed724e38a69d61
msgid "총 10개의 middle manager 노드 중 3개에서 job 수행"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:105
# fa0be6a02d5f4621a5f298b255d8c7fa
msgid "Ingestion 도구: Apache Kafka"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:107
# ace666178476449fae329dc99cb1bd3f
msgid "이와 같은 조건으로 data ingestion을 100회 수행하였고 평균 ingestion latency는 1.623439초였습니다. 여기서 ingestion latency는 아래 도식화한 것과 같이 Kaka ingestion, Druid ingestion, Druid query 처리에 소요되는 시간을 모두 합산한 것입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:116
# 9515e897368441b5897d90bf2db35c99
msgid "Druid에 대한 제3자의 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:119
# 315961ad7379450faf6662318c12b8c2
msgid "Outlier의 Druid 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:121
# c439c9c4b38c4bcfa8829ebb77752455
msgid "다음은 Outlier 블로그에 2016년 8월 26일에 게재된 Top 10 Time Series Databases라는 포스트\\ [#f2]_\\에서는 20개의 주요 오픈소스 시계열 데이터베이스 시스템을 평가하였습니다. 기고자인 Steven Acreman이 개인적으로 매긴 성능 랭킹에서 Druid는 20개 중 9위를 차지하였는데, 여기서 밝힌 Druid의 주요 성능은 다음과 같습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:0
# e67fec644e58450d89ec8b1cb2904b1b
msgid "Outlier의 주요 Druid 평가 내용"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 8f67f9d531854c8686dae14b8acf7ae1
msgid "평가 기준"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 405dcb5c7b1b46b6acf857be7cbbeb5d
msgid "Druid의 성능"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 4d32003d41454cf9bffda2dad897cddd
msgid "쓰기 성능 - 단일 노드"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# e1efcd6919d94d85afca829faf53a4c5
msgid "25k metrics/sec :raw-html:`<br />` 출처: https://groups.google.com/forum/#!searchin/druid-user/benchmark%7Csort:relevance/druid-user/90BMCxz22Ko/73D8HidLCgAJ"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 126560b6e2704c4faa4e3bf0970ed561
msgid "쓰기 성능 - 5개 노드 클러스터"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# e8814dfcae97498c83d8ab8d4d02fd65
msgid "100k metrics/sec (추산 결과)"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 5952bd357f2a48c19417cee88037e06b
msgid "쿼리 성능"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# feabe6b94d844625866b1131d5c2f98a
msgid "양호"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 75157d1337e0452a9001070c0c971b5f
msgid "개발 수준"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 51dfeb3dd10d477a94fc9790584a66a6
msgid "안정적인 제품을 제공하는 단계에 이름"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# d1fc7c1ff75d4476b9812069a05f885f
msgid "장점"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 87c7b0cf598c4da2abbd79707ad9e7a3
msgid "괜찮은 데이터 모델이면서 좋은 분석 도구 기능들을 갖추고 있음. 주로 batch 로드된 대량 데이터셋에 대해 신속하게 쿼리하는 데 사용되도록 설계되었으며, 이 점에서 탁월한 성능을 보임."
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 871d2c5cf8954a94b94d1ae66bf29544
msgid "단점"
msgstr ""

#: ../../discovery/part01/Assessment_by_Outlyer.csv:1
# 5216061da75948e7aa43cbd0985c0829
msgid "시스템 운용이 힘듦. 쓰기 처리 속도가 아주 빠르지는 않음. 실시간 ingestion 셋업이 까다로움"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:129
# ba935960eadb4bea9c78b8f3fa3df0a0
msgid "DB-Engines의 Druid 평가"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:131
# 4e70c5beb9f745de866efc1ead10bf3a
msgid "온라인 웹사이트 DB Engines\\ [#f3]_\\에서는 다양한 데이터베이스 관리 시스템(DBMS)의 시장 인기도를 매달 평가하며, 이때 다음과 같은 지표를 사용합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:133
# c28d5e55eb7c4cb3842a15eb7e9b24f5
msgid "인터넷에서 언급되는 횟수: Google, Bing, Yandex에서의 검색 결과로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:134
# 9b4010fc8ca449098b7efffcdf931278
msgid "일반적인 관심: Google Trends에서의 검색 빈도를 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:135
# 85698e8100094981bd3cdba9ac8fa9d7
msgid "기술 토론 빈도: 유명 IT 관련 Q&A 사이트인 Stack Overflow 및 DBA Stack Exchange 포스팅 현황을 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:136
# 75149689d3ab48c38c3bd8edb85d8ce2
msgid "구인 게시글 수: Indeed 및 Simply Hired의 게시글을 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:137
# 5fc2177dbdaa446d9aaba3b75a3b8f25
msgid "해당 커리어를 지닌 인재의 수: LinkedIn 및 Upwork에 게시된 프로필을 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:138
# 2be26aadebf2425da1c6d50ac1e500fc
msgid "SNS에서의 언급 수: Twitter의 트윗수를 기준으로 측정"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:140
# 2a9a2c5dd7804afb9408df4de5293a1c
msgid "그 결과 Druid는 2018년 7월 기준으로 총 343개 시스템 중에서 118위를 차지하였고, 그 중 시계열 데이터베이스 시스템만을 두고 집계했을 때 총 25개 시스템 중 7위를 차지하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:143
# ec2bb15c235b40f9be4e31ce82c81cbf
msgid "Apache Spark와의 비교"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:145
# 0725b28c6ebd43b7bc214b2ef5a094d5
msgid "Druid를 Apache Spark와 비교하는 것은 상당히 의미 있는 작업입니다. 둘 다 차세대 대용량 데이터 분석 솔루션으로 각광 받고 있으며, 서로 다른 장점을 가지고 있어 매우 상호보완적으로 조합이 가능하기 때문입니다. Metatron에서도 Druid를 데이터 저장/처리용 엔진으로 사용하고 Spark를 고급 분석용 모듈로 사용함으로써 이들 간의 시너지를 잘 활용하고 있습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:147
# f7093576fc1e4a1a9d5c155d1f540ede
msgid "여기서는 Sparkline Data Inc.의 창업자 Harish Butani가 공개한 Druid vs Spark 성능 비교 보고서\\ [#f4]_\\ [#f5]_\\의 내용을 간단히 소개합니다. 보고서에서는 애초에 두 솔루션이 경쟁 관계에 있다기 보다는 상보적인 역할을 한다고 상정을 하고 성능 비교를 시작합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:150
# c4663135e81c487982b6df192cb586d2
msgid "Apache Spark의 특징"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:152
# ad3dddc7ea584f4181d2ee6434ff3ec4
msgid "Apache Spark는 오픈소스 클러스터 컴퓨팅 프레임워크로서 Java, Scala, Python, R 언어로 이루어진 다양한 API를 제공합니다. Spark의 프로그래밍 모델은 SQL, 머신러닝, 그래프 프로세싱을 결합한 분석 솔루션을 구축하는 것입니다. Spark는 규모가 크거나 복잡한 데이터를 가공할 수 있도록 강력한 기능들을 지원하지만, Druid와 같은 interactive한 쿼리 처리에 최적화되지는 않았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:155
# 6c7d506261e9497db33750b25482b75c
msgid "데이터셋, 쿼리, 성능 비교 결과"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:157
# 32acf60419274e9e8567516cf092644a
msgid "본 성능 비교를 위한 데이터셋으로 TPCH 10G benchmark data set을 이용했습니다. 본래 이 데이터셋은 관계형 데이터베이스에 적합한 스타 스키마 구조를 갖기 때문에 이를 역정규화시킨 후 Druid와 Spark에서 처리할 수 있도록 재구성하였습니다. 이러한 처리를 거친 데이터셋의 크기는 각각 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:159
# f9f4e636340647ea97c9e7dcc15adc6e
msgid "TPCH Flat TSV: 46.80GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:160
# 2954849f866242c3b7c382e2e46da85b
msgid "Druid Index in HDFS: 17.04GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:161
# 0ca65f5d5a884f1eaf796eb332972be8
msgid "TPCH Flat Parquet: 11.38GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:162
# 094776a3e7504c0098a47258464c1da9
msgid "TPCH Flat Parquet Partition by Month: 11.56GB"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:164
# 6308c27ccdf744d8910bd0322dba8953
msgid "그런 다음 두 솔루션의 쿼리 처리 속도를 다각도에서 분석할 수 있는 여러 쿼리를 아래와 같이 구성하였습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:0
# bec376296c3149d88e5957aa19e3dee6
msgid "Druid와 Apache Spark의 query latency 비교 평가에 사용된 쿼리 내역"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# acbfb854164e4cf28b1b7685523fec7d
msgid "Query"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# d37fdcc7f9434a7ea5e4fdfedba72660
msgid "Interval"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 6fa73d9fea5348bba4cf7ba08f883bfd
msgid "Filters"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 9b2974f046164d5e95f892b879ab088d
msgid "Group By"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# fdd2c3388aba434e90f9382cd1f74d6a
msgid "Aggregations"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 8e6afbc6f8cb4fd4990de277cb5229cc
msgid "Basic Aggregation."
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 30ca51f215a9424d802af6abc2ad4c05
# 5e09139fb2414d32be5103d2b54a123f
# fd4f637f368f4f60aac0ed66c99c4e27
# bda0b347cde644e1b11570bee662bda9
# e7dc5174db9a4d1094b7e791027b1960
# 4f0a4134b32d421489d1321c361ab29d
# f465ddf55f874bd2b848259e499fe188
# 3824ca6fb2be4fbda76f3078d7b5109a
msgid "None"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# ed38bad78bb941b8aed5f15bcae39597
# 20f9c33e50bd49879f34889f3af2b921
# 3ba3adfc954944dca1ced8494f49b6b8
msgid "ReturnFlag :raw-html:`<br />` LineStatus"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# cecd5d08e60a43f8abdb3fcced45faa6
msgid "Count(*) :raw-html:`<br />` Sum(exdPrice) :raw-html:`<br />` Avg(avlQty)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# b9a50d6505eb4d1286ffaaeb2de82d35
msgid "Ship Date Range"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# c0a8940534ab45a38619ee1219f37fdf
# 66ace89ecfc6453ab2ffbd7735bc4d04
msgid "1995-12/1997-09"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# d04a0d713f8f473c9246e24b3ae2ff94
msgid "Count(*)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 817464c90ee5441f86d42feaffc604dd
msgid "SubQry :raw-html:`<br />` Nation, pType :raw-html:`<br />` ShpDt Range"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 8b97e13a1ac6480284fde8568b8386dd
msgid "P_Type :raw-html:`<br />` S_Nation + :raw-html:`<br />` C_Nation"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 9737c9da4b4e4b0693e6485419b00ee8
# 2682be72e4ea4618b27bb6f692e6c440
msgid "S_Nation"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 9fe7d710825c44c987e8a90505b1f677
# a7b2f5950bb64dab8927983abf8103ff
msgid "Count(*) :raw-html:`<br />` Sum(exdPrice) :raw-html:`<br />` Max(sCost) :raw-html:`<br />` Avg(avlQty) :raw-html:`<br />` Count(Distinct oKey)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 8e8a86ae0f3c4f62b779c64bc2d17132
msgid "TPCH Q1"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 503b764a4ea54a3c8be6c54d0d0a1f2d
msgid "TPCH Q3"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 8eee634f4d6c4dacbd562abd3720f0b1
msgid "1995-03-15-"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 2bfc1c7a2f324bb1bc736d291d9da5ea
msgid "O_Date :raw-html:`<br />` MktSegment"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 6b8b8ac3e3414345b01ca46a8ff22463
msgid "Okey :raw-html:`<br />` Odate :raw-html:`<br />` ShipPri"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# f6de7527efc84425af31aee841e18db3
# 38f8c6d290dd475fab66359cbc94d900
# 052d47a9631f46d7ba6235076d094916
# df8c271f0fa7491a8a1e9b7790a892b7
msgid "Sum(exdPrice)"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 51a8c4fdb9de4b299a9cf23cf6d139d8
msgid "TPCH Q5"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 0c24558415e141859a4b2c6e2e93c56a
msgid "O_Date :raw-html:`<br />` Region"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 0fc3d112c1384b569935182ef2add1ba
msgid "TPCH Q7"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# e00a50f85dee4bab937ab0506a783796
msgid "S_Nation + :raw-html:`<br />` C_Nation"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# a55171bf756a499b844cc5205eb1984a
msgid "S_Nation :raw-html:`<br />` C_Nation :raw-html:`<br />` ShipDate.Year"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 9419b5cb433548c09f9a584e2bdd0ac7
msgid "TPCH Q8"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# c98694e2b7d74a76bbabfc6d58bd340c
msgid "Region :raw-html:`<br />` Type :raw-html:`<br />` O_Date"
msgstr ""

#: ../../discovery/part01/comparison_with_Apache_Spark.csv:1
# 53ed6fff45844e70bae350eeb21a748f
msgid "ODate.Year"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:171
# 3faeebd4ea004e79a8b1b44a933cf1d8
msgid "테스트 결과는 다음과 같았습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:177
# a0568fd81eb244bd9339a5cb14dba77e
msgid "Source: Combining Druid and Spark: Interactive and Flexible Analytics at Scale"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:179
# e3a268abae2b49f9b48618955f6c7738
msgid "Filters + Ship Date 쿼리는 Druid에 특화된 slice-and-dice 성능을 테스트하는 것이었고, 예상대로 무려 50배 이상 속도 상에 우위를 보였습니다. 마찬가지로 TPCH Q7 쿼리를 처리하는 데도 Druid에서 수 밀리초가 소요된 반면, Spark에서는 수초가 소요되었습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:180
# b5c35d0febbb40f9aa5d5dd270f7160b
msgid "TPCH Q3, Q5, Q8 쿼리의 경우에는 Druid가 위 경우와 같은 극대화된 효율성을 보여주지 못했습니다. OrderDate 술어는 Druid에서 JavaScript 필터로 번역이 되는데, 이는 네이티브 Java 필터에 비해 현저히 느리기 때문입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:181
# 6017c8565a39454eada8dbdbfe4209a9
msgid "Basic Aggregation 및 TPCH Q1 쿼리의 경우에도 Druid에서 훨씬 빠른 처리 속도를 보여주었습니다. Druid에서는 Count-Distinct 동작이 cardinality aggregator로 번역이 되는데, 이는 approximate count에 해당합니다. 이러한 장점 덕에 Druid는 cardinality가 큰 차원들을 탐색할 때 유리합니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:183
# b2783865b92c474488e2bec090cb387a
msgid "여러 가지 조건에 따라 결과는 달라질 수 있지만, 한 가지 분명한 것은 시간 파티셔닝(time partitioning) 또는 차원 술어(dimensional predicates)를 포함하는 쿼리는 Druid에서 현저히 빠르게 처리한다는 것입니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:187
# a1c8f17d05fc40a18f7a989b34be00aa
msgid "시사점"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:189
# 0162c88f33e24eb4890eb04244f90fbf
msgid "이러한 테스트 결과는 Druid의 초고속 쿼리 처리 능력과 Spark의 고급 분석 기능을 결합하면 아주 훌륭한 시너지 효과를 기대할 수 있음을 시사합니다. Druid를 통해 신속하고 효율적으로 분석에 필요한 데이터만 추려낸 후 Spark의 풍부한 프로그래밍 API들을 활용하여 심층적인 분석을 실시하는 것입니다. 이렇게 함으로써 강력하고 유연하며 쿼리 latency가 매우 낮은 분석 솔루션을 구축할 수 있습니다."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:192
# e2bd5f27a1c24c91a271221cde529716
msgid "참고자료"
msgstr ""

#: ../../discovery/part01/druid_tests.rst:193
# e2435bf21bcb4168962cbc8726d8ed0c
msgid "Yang, E. Tschetter, X. Léauté, N. Ray, G. Merlino, and D. Ganguli. (2014). `Druid: a real-time analytical data store`. Retrieved from http://druid.io/docs/0.12.1/design/index.html."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:194
# fb8e57d250e34efabb32dccae443b389
msgid "Steven Acreman. (2016, Aug 26). `Top 10 Time Series Databases`. Retrieved from https://blog.outlyer.com/top10-open-source-time-series-databases."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:195
# 2e96ab49a8004036a7e211aca765af54
msgid "DB-Engines website. https://db-engines.com, July 2018."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:196
# 3415cff5205f4ff1bdf4dd5bad05e0c7
msgid "Harish Butani. (2018, Sep 18). Combining Druid and Spark: Interactive and Flexible Analytics at Scale. Retrieved from https://www.linkedin.com/pulse/combining-druid-spark-interactiveflexible-analytics-scale-butani."
msgstr ""

#: ../../discovery/part01/druid_tests.rst:197
# 644684f47a4743b3b7a30fd7cf14fd17
msgid "Harish Butani. (2015, Aug 28). TPCH Benchmark. Retrieved from https://github.com/SparklineData/spark-druid-olap/blob/master/docs/benchmark/BenchMarkDetails.pdf."
msgstr ""

