데이터 프리퍼레이션 소개
-----------------------------------------------

데이터 프리퍼레이션은 파일, 테이블 등의 데이터셋에 대해, 간편하게 변형 규칙을 생성해내고, 그 결과를 HDFS, Hive 등으로 저장하는 툴입니다.

.. figure:: /_static/img/discovery/part07/data_preparation_overview_1.png

사용자는 위와 같이 GUI를 통해 Step-by-Step으로 변형 규칙을 생성해낼 수 있습니다.
매 변형 결과는 데이터 분포도와 함께 메모리에 저장되기 때문에, 사용자는 이전 스텝 결과를 마우스 클릭만으로 간단히 확인할 수 있을 뿐 아니라,
마치 텍스트 편집기를 쓰는 것처럼 **undo**, **redo** 도 간단히 할 수 있습니다.
또한, 보통 변형 규칙 하나를 추가하려면 프로그래밍을 필요로 하거나, 최소한 SQL문을 작성해야하지만, 데이터 프리퍼레이션을 활용하면 몇 번의 마우스 클릭이나 타이핑 만으로 변형 규칙을 간편히 만들어 낼 수 있습니다.
이로써 일반적으로 많은 시간이 소요되는 데이터 정제 작업을 손쉽게 그리고 빠르게 처리해낼 수 있습니다.

입력 (Source)
========================

- 파일
    - CSV 파일
    - JSON 파일
    - 마이크로소프트 엑셀 파일
- 테이블
    - Oracle
    - MySQL
    - Hive
    - PostgreSQL
    - Presto
    - Tibero
    - Staging DB

참고로, Staging DB는 시스템 관리자가 설정하는 데이터베이스입니다. 보통은 클러스터 내 Hive로 설정됩니다.

데이터 프리퍼레이션의 입력에 대한 보다 자세한 내용은 `데이터셋 만들기 <create_a_dataset.html>`_ 를 참조하세요.

변형 (Transform)
========================

- ``drop``
- ``settype``
- ``setformat``
- ``header``
- ``keep``
- ``delete``
- ``replace``
- ``set``
- ``derive``
- ``split``
- ``merge``
- ``extract``
- ``countpattern``
- ``nest``
- ``unnest``
- ``flatten``
- ``aggregate``
- ``pivot``
- ``unpivot``
- ``join``
- ``union``
- ``window``

데이터 프리퍼레이션은 위와 함께 각종 수식 함수를 제공함으로써, 일반적인 데이터 정제에 필요한 대부분의 기능들을 지원하고 있습니다.

각각의 변형 룰에 대한 자세한 설명은 `데이터 플로우 관리하기 <manage_dataflow.html>`_ 를 참조하세요.

출력 (Destination)
===================

- 로컬 파일
    - CSV 파일
    - JSON 파일
- HDFS 파일
    - CSV 파일
    - JSON 파일
- 테이블
    - Staging DB

데이터 프리퍼레이션의 변형 결과는 데이터 스냅샷이라 불리우고, 위와 같은 형태들을 지원합니다.
이에 대한 보다 자세한 내용은 `데이터 스냅샷 만들기 <create_a_datasnapshot.html>`_ 및 `데이터 스냅샷 결과 보기 <data_snapshot.html>`_ 를 찹조하세요.

장점 (Benefits)
==============================
#. 프로그래밍이나 데이터 처리에 대해 잘 몰라도, 스스로 원하는 형태의 결과를 얻을 수 있습니다.
#. 데이터 처리에 능숙하다해도, GUI를 통해 효율적으로 **탐색적 변형** 이 가능합니다.
#. 기본적으로 수반되는 데이터 변형을 자동으로 수행합니다. 예를 들어, 명백히 숫자로 보이는 컬럼에 대해 알아서 형변환 규칙을 적용해줍니다. 물론 이것은 언제나 **undo** 또는 룰 삭제가 용이하기 때문에 가능한 일입니다.
#. 다양한 데이터 형태를 결합하여 원하는 형태로 바꿔놓을 수 있습니다. (eg. 기준 파일 + 팩트 테이블)
#. 만들어 둔 데이터 정제 결과를 다른 사람들과 공유함으로써, 물리적인 데이터를 주고 받는 부담을 줄여줍니다.
#. 실제 데이터는 지우고, 그것을 만드는 방법만 유지함으로써 저장 공간을 아끼고, **ILM (Information Life Cycle)** 을 줄일 수 있습니다. 다시 필요할 때 실데이터를 만들어내는데에 부담이 줄어들기 때문입니다.
